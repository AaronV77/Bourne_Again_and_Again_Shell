

Options for design

    Option 1: 
        Condense the methods - "GetArguments", and "ArgumentChecker"

        Have the searchcommands method be broken down into actual methods. Use a vector of function
        calls to call the specific command methods. Also have each method take in the same amount 
        of arguments. For the arguments I'm thinking a signal, a vector, a string, and a number possibly.
        I suppose that all of that can be held within another struct as well. Also have them return 
        the same amount of arguments every time. I'm thinking a struct.

        - Thinkings
            - What if the method needs an environment. I don't want to import the environment to every
            method. I want to keep it a standard.

            - Conclusion: After looking through the search commands method it seems that there are no
            commands that need the environment.

            


        The struct will have the output, an error code, an error message, and either a vector or some
        type of container to hold the output.
        
        Get rid of the text file to load the commands into the system. Just put them into an arra

    Option 2:

    Option 3:


Concepts

    Tests:

        - Hard to test commands if they are all started in the search commands method. But I want
        to make sure that all is working correctly in all methods and are operating correctly.


    Pipe, STDIN, STDOUT:

        - One thing I just realized is that my commands do not work with pipes, stdin, and stdout.

        - Need to read more about standard in and pipe, to see what commands mainly use them. 

        - Standard Out would not be hard to implement, we would just have to push the packaged output
        to a file print out method rather than the display print out.


    Error Handling: 

        - I'm thinking that if I put all the commands into a method that I will have them return a struct
        that will have the output, an error code, an error message, and either a vector or some type of container
        to hold the output.

        - But the question to ask is why have error return handling? If I return errors what will i do with them,
        there is no correction that will be needed other than when we read in data possibly1? If we dectect and 
        error then dump the data and clean out the memory or something like that.

        The best way handle errors is in the methods, at the point of execution.


    Information Output:

        - I want to localize the output to one method to where I don't have to worry aobut what the data will look
        like on the screen. The method will also take care of what size of the screen is and how to make sure that
        the output will look good.


    System Read-In:

        - The system should operate like python with csv files but instead of commas I want it to be the # symbol.
        I just don't feel like re-doing all the files I have to change it to something else. Also with it being a 
        symbol that is not commonly used to often in sentences and data.


    Color:

        - I just want the color to be put back in a namespace of its own, just to seperate the code from the rest.


    Management System: 